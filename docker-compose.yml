services:
  core-db:
    image: postgres:15
    container_name: core-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: "${POSTGRES_DB:-casuse_core}"
      POSTGRES_USER: "${POSTGRES_USER:-casuse}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-V4!urw7FtCj^2sGqKz9*NhQp5yWbLdXm}"
      TZ: "${TZ:-UTC}"
    volumes:
      - core_db_data:/var/lib/postgresql/data
    networks: [core_net]

  core-backend:
    build:
      context: ./core-backend
    restart: unless-stopped
    environment:
      ENVIRONMENT: "${ENVIRONMENT:-production}"
      TZ: "${TZ:-UTC}"
      DATABASE_URL: "postgresql://${POSTGRES_USER:-casuse}:${POSTGRES_PASSWORD:-V4!urw7FtCj^2sGqKz9*NhQp5yWbLdXm}@core-db:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-casuse_core}"
      JWT_ALG: "${JWT_ALG:-HS256}"
      JWT_SECRET: "${JWT_SECRET:-Q5&b9LzR1@eY7u!H3pV^cD2kM8sN0xAa}"
      # issuer verwijst intern naar de backend op poort 9000
      OIDC_ISSUER_URL: "${OIDC_ISSUER_URL:-http://core-backend:9000/auth}"
      OIDC_CLIENT_ID: "${OIDC_CLIENT_ID:-core-frontend}"
      OIDC_CLIENT_SECRET: "${OIDC_CLIENT_SECRET:-U8!pDx3^Tn5#qLs7Zk1@wVr0}"
    depends_on:
      - core-db
    labels:
      - "traefik.enable=true"

      # Router: alles voor backend-API's
      - "traefik.http.routers.core-backend.rule=HostRegexp(`{host:.+}`) && (PathPrefix(`/api`) || PathPrefix(`/auth`) || PathPrefix(`/docs`) || PathPrefix(`/openapi.json`) || PathPrefix(`/healthz`) || PathPrefix(`/readyz`) || PathPrefix(`/token`) || PathPrefix(`/tiles`))"
      - "traefik.http.routers.core-backend.entrypoints=web"
      # Backend luistert op 9000
      - "traefik.http.services.core-backend.loadbalancer.server.port=9000"

      # ---------- Rewrites (frontend -> backend) ----------
      # 1) /token  -> /auth/token   (POST)
      - "traefik.http.middlewares.core-backend-rewrite-token.replacepathregex.regex=^/token$"
      - "traefik.http.middlewares.core-backend-rewrite-token.replacepathregex.replacement=/auth/token"
      # 2) /tiles  -> /api/tiles    (GET)
      - "traefik.http.middlewares.core-backend-rewrite-tiles.replacepathregex.regex=^/tiles(.*)$"
      - "traefik.http.middlewares.core-backend-rewrite-tiles.replacepathregex.replacement=/api/tiles$1"
      # Koppel beide middlewares aan de backend-router
      - "traefik.http.routers.core-backend.middlewares=core-backend-rewrite-token,core-backend-rewrite-tiles"
    networks: [core_net]

  core-frontend:
    build:
      context: ./core-frontend
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.core-frontend.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.core-frontend.entrypoints=web"
      # Frontend container luistert intern op 8200
      - "traefik.http.services.core-frontend.loadbalancer.server.port=8200"
    networks: [core_net]

  core-traefik:
    image: traefik:2.11
    container_name: core-traefik
    restart: unless-stopped
    ports:
      - "${PUBLIC_HTTP_PORT:-10400}:80"   # lokaal alleen HTTP
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - core_net
      - casuse_edge

networks:
  core_net: {}
  casuse_edge:
    external: true

volumes:
  core_db_data:
