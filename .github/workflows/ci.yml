name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: core-backend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Lint & Tests
        run: |
          if [ -d tests ]; then pytest -q; else echo "No tests folder; skipping"; fi

  build_and_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Derive image tags
        id: vars
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          echo "TAG_SHA=sha-${SHORT_SHA}" >> "$GITHUB_OUTPUT"
          echo "IMAGE_BACKEND=ghcr.io/${GITHUB_REPOSITORY_OWNER}/casuse-core-backend" >> "$GITHUB_OUTPUT"
          echo "IMAGE_FRONTEND=ghcr.io/${GITHUB_REPOSITORY_OWNER}/casuse-core-frontend" >> "$GITHUB_OUTPUT"

      - name: Build backend image
        uses: docker/build-push-action@v6
        with:
          context: ./core-backend
          push: true
          tags: |
            ${{ steps.vars.outputs.IMAGE_BACKEND }}:${{ steps.vars.outputs.TAG_SHA }}

      - name: Build frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./core-frontend
          push: true
          tags: |
            ${{ steps.vars.outputs.IMAGE_FRONTEND }}:${{ steps.vars.outputs.TAG_SHA }}

      - name: Generate SBOM (Syft)
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.vars.outputs.IMAGE_BACKEND }}:${{ steps.vars.outputs.TAG_SHA }}

      - name: Trivy scan (HIGH/CRITICAL -> fail)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ steps.vars.outputs.IMAGE_BACKEND }}:${{ steps.vars.outputs.TAG_SHA }}
          format: 'table'
          exit-code: '1'
          severity: 'HIGH,CRITICAL'
